@*@{
        Layout = null;
    }*@

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <title>Aria Chat</title>
    <link rel="stylesheet" href="~/Content/bootstrap.min.css" />
    <link rel="stylesheet" href="~/Content/bootstrap-theme.min.css" />
    <link rel="icon" href="~/Static/favicon.ico" />
    <style>
        /** {
            border: 1px solid black;
        }*/

        body {
            background-image: url("../Static/geometric.png");
            background-repeat: repeat;
        }

        p {
            word-wrap: break-word;
        }

        .flex {
            height: calc( 100vh - 56px );
            display: flex;
            flex-direction: row;
            justify-content: flex-end;
        }

        footer {
            margin-bottom: 5px;
        }

        #discussion {
            border: 1px solid blue;
            border-radius: 5px;
            flex-direction: column;
            display: flex;
            flex: 1;
            padding: 5px;
            margin: 5px 0;
            overflow-y: auto;
            overflow-x: hidden;
            background-color: whitesmoke;
        }

        .leftStick {
            margin-top: 5px;
            overflow-y: auto;
            overflow-x: hidden;
        }

        hr {
            width: 100%;
            color: black;
            height: 1px;
            background-color: black;
            margin-top: 2px;
            margin-bottom: 5px;
        }
    </style>
</head>
<body class="container-fluid">

    <nav class="col-md-2 leftStick">
        <div class="panel panel-info">
            <div class="panel-heading">
                Liste des personnes connectées
            </div>
            <div class="panel-body">
                <ul class="list-group" id="list-users"></ul>
            </div>
        </div>
    </nav>

    <div class="col-md-8 row">
        <div class="col-md-12">
            <input type="hidden" id="displayname" />
            <div class="flex">
                <div id="discussion"></div>
            </div>
        </div>
        <footer class="col-md-12">
            <input type="text" class="form-control" id="message" />
        </footer>
    </div>

    <script src="~/Scripts/jquery-1.10.2.min.js"></script>
    <script src="~/Scripts/jquery.signalR-2.1.2.min.js"></script>
    <script src="~/signalr/hubs"></script>
    <script src="~/Scripts/bootstrap.min.js"></script>
    <script src="~/Scripts/linkify.min.js"></script>
    <script src="~/Scripts/linkify-jquery.min.js"></script>

    <script>
        "use strict";
        var json_payload = @Html.Raw(Json.Encode(ViewBag.payload));

        if (document.cookie.trim() !== '')
            var sayMyName = JSON.parse(document.cookie).name;
        else
            sayMyName = prompt('Enter your nickname:', '');

        if (sayMyName.trim() === "") {
            alert("You must enter a nickname!");
            throw "no nick.";
        }

        sayMyName = sayMyName.trim();

        document.cookie = JSON.stringify({ name: sayMyName }) + ';max-age=2592000';

        $(function() {
            var listNames = {},
                focused = true;

            document.onfocus = function(e){
                focused = true;
            };

            document.onblur = function(e){
                focused = false;
            };

            if (!("Notification" in window)) {
                alert("Dinosaurus browserus, update to recent browser!");
            }
            else if (Notification.permission !== 'denied') {
                Notification.requestPermission(function (permission) {

                    if(!('permission' in Notification)) {
                        Notification.permission = permission;
                    }
                })
            }

            for (var dateStr in json_payload) {
                $('#discussion').append('<hr/><p class="text-center">Message Log for '+dateStr+'</p><hr/>');

                json_payload[dateStr].forEach(function(x) {
                    affTexte(x.Username, ParseDate(x.DateTime), x.Content);
                });
            }

            var chat = $.connection.chatHub;

            chat.client.callBackUserName = function() {
                chat.server.registerUserName($("#displayname").val());
            };

            chat.client.broadCastUsersList = function(users) {
                $("#list-users").children().remove();

                for (var user in users) {
                    if (listNames[users[user]] === undefined)
                        listNames[users[user]] = 0;

                    //SI IL Y A UN NOUVEL UTILISATEUR, ON CRÉE UNE RÈGLE POUR SON NOM
                    if (listNames[users[user]] === 0)
                        createNewCSSRule(users[user]);

                    $("#list-users").append($("<li class='list-group-item'>"
                        + users[user]
                        + "</li>"));

                    listNames[users[user]]++;
                }
            };

            chat.client.addNewMessageToPage = function(name, message) {
                affTexte(name, new Date(), message);
                if (Notification.permission === "granted" && name !== $('#displayname').val() && focused === false)
                    var notif = new Notification(htmlEncode(name), { body: htmlEncode(message)});
            };
            $('#displayname').val(sayMyName);

            $('#message').focus();
            $.connection.hub.start()
                .done(function() {
                    $('#message')
                        .keyup(function(e) {
                            if (e.which === 13) {
                                chat.server.send($('#displayname').val(), $('#message').val());
                                $('#message').val('').focus();
                            }
                        });
                });
        });

        function htmlEncode(value) {
            var encodedValue = $('<div />').text(value).html();
            return encodedValue;
        }

        /**
        * AFFICHE DANS LA DISCUSSION LE MESSAGE ET SCROLL DESSUS
        * param {string} name - le nom de l'utilisateur
        * param {Date} date - la date du message
        * param {string} message - le message de l'utilisateur
        */
        var affTexte = function(name, date, message) {
            var element = $('<p id="' +
                new Date().getTime() +
                Math.random() +
                '">' +
                '<strong>[' +
                date.getDateTimeFR() +
                '] ' +
                '<span class="'+
                normalizeNameForCSSRule(name) +
                '">' +
                htmlEncode(name) +
                "</span>" +
                '</strong>: ' +
                htmlEncode(message) +
                '</p>');

            var eltLinked = element.linkify({ 
                target: "_blank"
            });

            /* COMBLE DES FAILLES DE LINKIFY
             * LE NATIF VAINCRA!
            */
            var aTab = eltLinked[0].getElementsByTagName("a");
            
            for (var i = 0; i < aTab.length; i++) {
                aTab[i].setAttribute("rel", "noopener noreferrer");
            }
            
            $('#discussion').append(eltLinked);

            $("#discussion").scrollTop($("#discussion")[0].scrollHeight);
        };

        var createNewCSSRule = function(nameToRule){
            var style = document.getElementsByTagName("style")[0].sheet;

            style.insertRule("." + normalizeNameForCSSRule(nameToRule) + " {color:" + getRandomHexColor() + ";}", style.cssRules.length)
        };

        var getRandomHexColor = function(){
            return "#" + getRandomHex() + getRandomHex() + getRandomHex();
        };

        var getRandomHex = function(){
            var num = getRandomIntInclusive(0, 255).toString(16);
            
            return (num.length < 2 ? "0" + num : num);
        };

        var getRandomIntInclusive = function(min, max) {
            return Math.floor(Math.random() * (max - min +1)) + min;
        };

        var normalizeNameForCSSRule = function(name) {
            return name.toString().replace(/ |\W/gm, "");
        };
    </script>
    <script>
        "use strict";

        var ParseDate = function(dateStr) {
            var l_dateStr = /\d{13}/.exec(dateStr);

            if (l_dateStr.length === 1)
                return new Date(parseInt(l_dateStr[0], 10));

            return new Date("Invalid Date");
        };

        /**
        * RETOURNE UNE STRING DE LA DATE ET L'HEURE ACTUELLE AU FORMAT FRANÇAIS
        * returns {String} : JJ/MM/AAAA HH:MM
        */
        Date.prototype.getDateTimeFR = function() {
            var now = this;
            return [_AffZero(now.getHours()), _AffZero(now.getMinutes())].join(':');
        };

        /**AFFICHE UN ZÉRO SI LE NOMBRE PASSÉ EN PARAMÈTRE EST INFÉRIEUR À 10
        * param {Number} nombre
        * returns {String} chaine au format numérique
        */
        var _AffZero = function(nombre) {
            if (!isNaN(nombre)) {
                if (nombre < 10) {
                    return "0" + nombre;
                }
                return "" + nombre;
            }
            return nombre;
        };
    </script>
</body>
</html>
